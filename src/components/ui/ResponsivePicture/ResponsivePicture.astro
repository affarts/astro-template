---
import { getImage } from 'astro:assets'

// Тип для изображения с медиазапросом
interface ImageSource {
  image: any // ImageMetadata
  media?: string // Медиа-запрос
}

// Тип для пропсов компонента
export interface Props {
  sources: ImageSource[]
  alt: string
  className?: string
  imgClassName?: string
  style?: string
  widths?: number[]
  width?: number
  height?: number
  formats?: ('webp' | 'jpg' | 'png')[]
}

// Значения по умолчанию для форматов и ширин
const defaultFormats: ('webp' | 'jpg')[] = ['webp', 'jpg']
const defaultWidths: number[] = [480, 768, 1024, 1440]

// Оптимизация изображений для всех форматов
const optimizedImages = await Promise.all(
  Astro.props.sources.map(
    async (
      imageSource
    ): Promise<{ media: string; formats: Record<string, any> }> => {
      return {
        media: imageSource.media,
        formats: await Promise.all(
          (Astro.props.formats ?? defaultFormats).map(async (format) => {
            const image = await getImage({
              src: imageSource.image.default,
              format,
              widths: Astro.props.widths ?? defaultWidths
            })
            return {
              type: format,
              srcSet: image.srcSet,
              src: image.src,
              attributes: image.attributes
            } // Сохраняем тип формата для дальнейшего использования
          })
        )
      }
    }
  )
)

const { alt, className, imgClassName } = Astro.props
---

<picture class={className}>
  {
    optimizedImages.map(({ media, formats }) => (
      <>
        {formats.map(({ type, src }) => (
          <source srcset={src} type={`image/${type}`} media={media} />
        ))}
      </>
    ))
  }
  <!-- Fallback -->
  <img
    src={optimizedImages[0].formats[0].src}
    alt={alt}
    class={imgClassName}
    width={Astro.props.width ?? optimizedImages[0].formats[0].attributes.width}
    height={Astro.props.height ??
      optimizedImages[0].formats[0].attributes.height}
  />
</picture>
